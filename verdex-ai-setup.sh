#!/bin/bash

# ü§ñ VERDEX FRAMEWORK IA - Script de Instalaci√≥n Principal
# Version: 2.0.0
# Descripci√≥n: Instalador inteligente del framework de desarrollo IA empresarial
# Autor: Verdex Development Team

set -euo pipefail

# ========================================================================================
# CONFIGURACI√ìN Y VARIABLES GLOBALES
# ========================================================================================

readonly FRAMEWORK_NAME="Verdex Framework IA"
readonly FRAMEWORK_VERSION="2.0.0"
readonly FRAMEWORK_DIR=".verdex-ai"
readonly MAIN_GUIDE="VERDEX_AI_AGENT_GUIDE.md"
readonly REPO_URL="https://raw.githubusercontent.com/your-org/verdex-framework-ia/main"
readonly TMP_DIR="/tmp/verdex-ai-install"

# Colores para output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m' # No Color

# Configuraci√≥n de logging
readonly LOG_FILE="$FRAMEWORK_DIR/sessions/installation.log"

# ========================================================================================
# FUNCIONES DE UTILIDAD
# ========================================================================================

# Funci√≥n de logging con timestamp
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE" 2>/dev/null || echo "[$timestamp] [$level] $message"
    
    case $level in
        "INFO")  echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}‚úÖ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "ERROR") echo -e "${RED}‚ùå $message${NC}" ;;
        "HEADER") echo -e "${PURPLE}üöÄ $message${NC}" ;;
    esac
}

# Funci√≥n de banner
show_banner() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
                                                                    
     Framework de Desarrollo IA Empresarial v2.0
EOF
    echo -e "${NC}"
    echo -e "${WHITE}üè¢ Framework de Desarrollo IA Empresarial con Integraci√≥n Atlassian${NC}"
    echo -e "${CYAN}üìÖ Version: $FRAMEWORK_VERSION${NC}"
    echo ""
}

# Funci√≥n para detectar tipo de proyecto
detect_project_type() {
    local project_type="unknown"
    
    # Verificar si ya tiene el framework instalado
    if [ -d "$FRAMEWORK_DIR" ] && [ -f "$MAIN_GUIDE" ]; then
        project_type="verdex_existing"
    # Detectar por archivos caracter√≠sticos
    elif [ -f "package.json" ]; then
        if [ -f "next.config.js" ] || [ -f "nuxt.config.js" ]; then
            project_type="webapp_modern"
        else
            project_type="node_js"
        fi
    elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
        if [ -f "main.py" ] || [ -f "app.py" ]; then
            project_type="python_web"
        else
            project_type="python_general"
        fi
    elif [ -f "composer.json" ]; then
        project_type="php_web"
    elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
        project_type="java_enterprise"
    elif [ -f "Cargo.toml" ]; then
        project_type="rust_system"
    elif [ -f "go.mod" ]; then
        project_type="go_service"
    elif [ -f "pubspec.yaml" ]; then
        project_type="flutter_mobile"
    elif [ -f "docker-compose.yml" ]; then
        project_type="containerized_app"
    elif [ -f "README.md" ] || [ -f "readme.md" ]; then
        project_type="generic_existing"
    else
        project_type="empty_project"
    fi
    
    echo "$project_type"
}

# Funci√≥n para verificar prerequisitos
check_prerequisites() {
    log "INFO" "Verificando prerequisitos del sistema..."
    
    local missing_deps=()
    
    # Verificar herramientas b√°sicas
    command -v curl >/dev/null 2>&1 || missing_deps+=("curl")
    command -v git >/dev/null 2>&1 || missing_deps+=("git")
    command -v mkdir >/dev/null 2>&1 || missing_deps+=("mkdir")
    
    # Verificar Node.js para MCP (opcional)
    if ! command -v node >/dev/null 2>&1; then
        log "WARNING" "Node.js no encontrado - algunas funciones MCP pueden no funcionar"
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log "ERROR" "Dependencias faltantes: ${missing_deps[*]}"
        log "INFO" "Por favor instala las dependencias faltantes y ejecuta nuevamente"
        exit 1
    fi
    
    log "SUCCESS" "Todos los prerequisitos est√°n instalados"
}

# ========================================================================================
# FUNCIONES DE INSTALACI√ìN
# ========================================================================================

# Crear estructura de directorios
create_framework_structure() {
    log "INFO" "Creando estructura del framework..."
    
    # Crear directorio principal oculto
    mkdir -p "$FRAMEWORK_DIR"
    
    # Crear subdirectorios con estructura profesional
    mkdir -p "$FRAMEWORK_DIR"/{config,scripts,sessions,lab,docs,templates}
    mkdir -p "$FRAMEWORK_DIR"/sessions/session-logs
    mkdir -p "$FRAMEWORK_DIR"/lab/{experiments,prototypes,testing}
    mkdir -p "$FRAMEWORK_DIR"/templates/{jira-tickets,confluence-pages,session-reports}
    mkdir -p "$FRAMEWORK_DIR"/docs/{guides,troubleshooting}
    
    # Crear archivo de log de instalaci√≥n
    mkdir -p "$(dirname "$LOG_FILE")"
    touch "$LOG_FILE"
    
    log "SUCCESS" "Estructura del framework creada"
}

# Crear archivo de configuraci√≥n inicial
create_initial_config() {
    log "INFO" "Creando configuraci√≥n inicial..."
    
    local project_type=$(detect_project_type)
    local current_date=$(date "+%Y-%m-%d")
    
    # Detectar stack tecnol√≥gico
    local tech_stack=()
    [ -f "package.json" ] && tech_stack+=("Node.js")
    [ -f "requirements.txt" ] && tech_stack+=("Python")
    [ -f "composer.json" ] && tech_stack+=("PHP")
    [ -f "docker-compose.yml" ] && tech_stack+=("Docker")
    
    cat > "$FRAMEWORK_DIR/config/project-info.yaml" << EOF
# Verdex Framework IA - Informaci√≥n del Proyecto
# Generado autom√°ticamente durante la instalaci√≥n

project:
  name: "$(basename "$(pwd)")"
  type: "$project_type"
  technology_stack: $(printf '%s\n' "${tech_stack[@]}" | sed 's/^/    - /' | tr '\n' ' ')
  installation_date: "$current_date"
  framework_version: "$FRAMEWORK_VERSION"

# Configuraci√≥n detectada autom√°ticamente
detection:
  has_package_json: $([ -f "package.json" ] && echo "true" || echo "false")
  has_requirements_txt: $([ -f "requirements.txt" ] && echo "true" || echo "false")
  has_docker_compose: $([ -f "docker-compose.yml" ] && echo "true" || echo "false")
  has_readme: $([ -f "README.md" ] && echo "true" || echo "false")

# Integraci√≥n Atlassian
atlassian:
  mcp_configured: false
  jira_project_key: ""
  confluence_space: ""
EOF

    log "SUCCESS" "Configuraci√≥n inicial creada para proyecto tipo: $project_type"
}

# Crear archivo conversation-history.md inicial
create_conversation_history() {
    log "INFO" "Creando historial de conversaci√≥n inicial..."
    
    local project_name=$(basename "$(pwd)")
    local current_date=$(date "+%Y-%m-%d")
    local current_time=$(date "+%H:%M:%S")
    
    cat > "$FRAMEWORK_DIR/sessions/conversation-history.md" << EOF
# üí¨ Verdex Framework IA - Historial de Conversaci√≥n

> **Proyecto**: $project_name
> **Instalaci√≥n**: $current_date $current_time

---

## üìÖ Sesi√≥n Actual: $current_date

### üéØ Objetivo de la Sesi√≥n
**Instalaci√≥n Inicial**: Configuraci√≥n del Verdex Framework IA en proyecto existente

### üé´ Tickets Jira Relacionados
- Sin tickets (instalaci√≥n inicial del framework)

### ‚ö° Acciones Realizadas
1. ‚úÖ Instalaci√≥n del Verdex Framework IA v$FRAMEWORK_VERSION
2. ‚úÖ Creaci√≥n de estructura en .$FRAMEWORK_DIR/
3. ‚úÖ Detecci√≥n autom√°tica de tipo de proyecto
4. ‚úÖ Configuraci√≥n inicial aplicada

### üìä Estado Actual
- **Framework**: Verdex Framework IA v$FRAMEWORK_VERSION instalado
- **Ubicaci√≥n**: .$FRAMEWORK_DIR/ (carpeta oculta)
- **Proyecto**: $(detect_project_type)
- **Listo para uso**: ‚úÖ

### üîÑ Pr√≥ximos Pasos
1. Configurar integraci√≥n MCP Atlassian
2. Crear primer ticket Jira para trabajo inicial
3. Familiarizarse con la estructura del framework
4. Leer gu√≠a para agentes en $MAIN_GUIDE

### üìù Notas de Instalaci√≥n
- Framework instalado exitosamente
- Estructura profesional creada
- Configuraci√≥n autom√°tica aplicada
- Listo para trabajo con agentes IA

---

*üìÖ Instalaci√≥n completada: $current_date $current_time*
*ü§ñ Instalador: Verdex AI Setup v$FRAMEWORK_VERSION*
EOF

    log "SUCCESS" "Historial de conversaci√≥n inicial creado"
}

# Crear scripts b√°sicos del framework
create_framework_scripts() {
    log "INFO" "Creando scripts del framework..."
    
    # Script de verificaci√≥n de salud
    cat > "$FRAMEWORK_DIR/scripts/health-check.sh" << 'EOF'
#!/bin/bash
# Verdex Framework IA - Health Check

echo "üîç Verificando estado del Verdex Framework IA..."

# Verificar estructura
echo "üìÅ Estructura del framework:"
if [ -d ".verdex-ai" ]; then
    echo "  ‚úÖ Directorio principal: .verdex-ai/"
    echo "  ‚úÖ Configuraci√≥n: .verdex-ai/config/"
    echo "  ‚úÖ Scripts: .verdex-ai/scripts/"
    echo "  ‚úÖ Sesiones: .verdex-ai/sessions/"
    echo "  ‚úÖ Laboratorio: .verdex-ai/lab/"
else
    echo "  ‚ùå Framework no instalado"
    exit 1
fi

# Verificar archivos principales
echo "üìÑ Archivos principales:"
[ -f "VERDEX_AI_AGENT_GUIDE.md" ] && echo "  ‚úÖ Gu√≠a de agentes" || echo "  ‚ö†Ô∏è  Gu√≠a faltante"
[ -f ".verdex-ai/config/framework-settings.yaml" ] && echo "  ‚úÖ Configuraci√≥n" || echo "  ‚ö†Ô∏è  Configuraci√≥n faltante"
[ -f ".verdex-ai/sessions/conversation-history.md" ] && echo "  ‚úÖ Historial" || echo "  ‚ö†Ô∏è  Historial faltante"

echo "‚úÖ Health check completado"
EOF

    chmod +x "$FRAMEWORK_DIR/scripts/health-check.sh"
    
    log "SUCCESS" "Scripts del framework creados"
}

# Crear gu√≠a principal para agentes
create_agent_guide() {
    log "INFO" "Creando gu√≠a principal para agentes..."
    
    # El contenido est√° en el archivo original VERDEX_AI_AGENT_GUIDE.md
    # Por simplicidad, creamos una versi√≥n b√°sica aqu√≠
    cat > "$MAIN_GUIDE" << 'EOF'
# ü§ñ VERDEX FRAMEWORK IA - GU√çA PARA AGENTES

> **Framework de Desarrollo IA Empresarial con Integraci√≥n Atlassian Obligatoria**

## üéØ PROTOCOLO DE INICIALIZACI√ìN OBLIGATORIO

**Antes de cualquier trabajo, el agente DEBE:**

1. **üìç Verificar framework**: `ls -la .verdex-ai/`
2. **üìñ Leer historial**: `cat .verdex-ai/sessions/conversation-history.md`
3. **üîó Verificar MCP**: `.verdex-ai/scripts/verify-connections.sh`
4. **üé´ Crear ticket Jira**: Obligatorio antes de proceder
5. **üìù Actualizar log**: Registrar inicio de sesi√≥n

## üîÑ FLUJO DE TRABAJO EST√ÅNDAR

1. **üöÄ AN√ÅLISIS** - Verificar estado y analizar solicitud
2. **üìã PLANIFICACI√ìN** - Crear ticket y documentar plan
3. **üß™ EXPERIMENTACI√ìN** - Probar en `.verdex-ai/lab/` ANTES de implementar
4. **‚ö° IMPLEMENTACI√ìN** - Aplicar cambios con referencia a ticket
5. **‚úÖ VALIDACI√ìN** - Ejecutar health checks y verificar
6. **üìö DOCUMENTACI√ìN** - Actualizar docs y cerrar ticket

## üìù REGLAS DE LOGGING

**OBLIGATORIO actualizar conversation-history.md:**
- Al inicio de cada conversaci√≥n
- Durante cada prompt del usuario  
- Al final de cada sesi√≥n

## üö´ REGLAS ESTRICTAS

### ‚úÖ SIEMPRE HACER:
- Crear ticket Jira antes de trabajar
- Experimentar en `.verdex-ai/lab/` primero
- Actualizar historial de conversaci√≥n
- Usar MCP Atlassian

### üö´ NUNCA HACER:
- Trabajar sin ticket v√°lido
- Modificar c√≥digo sin experimentar
- Omitir documentaci√≥n
- Generar archivos fuera del framework

---

*üìÖ Verdex Framework IA v2.0 - Para excelencia en desarrollo asistido por IA*
EOF

    log "SUCCESS" "Gu√≠a principal para agentes creada: $MAIN_GUIDE"
}

# ========================================================================================
# FUNCI√ìN PRINCIPAL DE INSTALACI√ìN
# ========================================================================================

# Funci√≥n principal de instalaci√≥n
install_framework() {
    local project_type=$(detect_project_type)
    
    log "HEADER" "Iniciando instalaci√≥n del $FRAMEWORK_NAME v$FRAMEWORK_VERSION"
    log "INFO" "Proyecto detectado: $project_type"
    
    # Verificar si ya est√° instalado
    if [ "$project_type" = "verdex_existing" ]; then
        log "WARNING" "El framework ya est√° instalado en este proyecto"
        log "INFO" "¬øDeseas reinstalar? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            log "INFO" "Instalaci√≥n cancelada"
            exit 0
        fi
        log "INFO" "Reinstalando framework..."
    fi
    
    # Crear backup si existe contenido
    if [ -d "$FRAMEWORK_DIR" ]; then
        local backup_dir="$FRAMEWORK_DIR.backup.$(date +%Y%m%d_%H%M%S)"
        log "INFO" "Creando backup en: $backup_dir"
        mv "$FRAMEWORK_DIR" "$backup_dir"
    fi
    
    # Ejecutar instalaci√≥n
    create_framework_structure
    create_initial_config
    create_conversation_history
    create_framework_scripts
    create_agent_guide
    
    log "SUCCESS" "‚ú® $FRAMEWORK_NAME v$FRAMEWORK_VERSION instalado exitosamente!"
    
    # Mostrar resumen
    show_installation_summary
}

# Mostrar resumen de instalaci√≥n
show_installation_summary() {
    echo ""
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}‚ú® INSTALACI√ìN COMPLETADA EXITOSAMENTE${NC}"
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
    echo -e "${CYAN}üìÅ Framework instalado en:${NC} .verdex-ai/"
    echo -e "${CYAN}üìã Gu√≠a para agentes:${NC} VERDEX_AI_AGENT_GUIDE.md"
    echo -e "${CYAN}‚öôÔ∏è  Configuraci√≥n:${NC} .verdex-ai/config/"
    echo -e "${CYAN}üí¨ Historial conversaci√≥n:${NC} .verdex-ai/sessions/conversation-history.md"
    echo ""
    echo -e "${YELLOW}üöÄ PR√ìXIMOS PASOS:${NC}"
    echo "1. Configura MCP Atlassian: .verdex-ai/scripts/configure-atlassian.sh"
    echo "2. Lee la gu√≠a: cat VERDEX_AI_AGENT_GUIDE.md"
    echo "3. Ejecuta health check: .verdex-ai/scripts/health-check.sh"
    echo "4. Inicia trabajo con agentes IA siguiendo las instrucciones"
    echo ""
    echo -e "${PURPLE}üìö Para agentes IA: SIEMPRE leer VERDEX_AI_AGENT_GUIDE.md antes de proceder${NC}"
    echo ""
}

# ========================================================================================
# PUNTO DE ENTRADA PRINCIPAL
# ========================================================================================

main() {
    # Verificar que se ejecute desde directorio v√°lido
    if [ ! -w "." ]; then
        log "ERROR" "No tienes permisos de escritura en este directorio"
        exit 1
    fi
    
    # Mostrar banner
    clear
    show_banner
    
    # Verificar prerequisites
    check_prerequisites
    
    # Ejecutar instalaci√≥n
    install_framework
    
    log "SUCCESS" "üéâ $FRAMEWORK_NAME listo para usar!"
}

# Ejecutar funci√≥n principal con manejo de errores
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    trap 'log "ERROR" "Error en l√≠nea $LINENO. C√≥digo de salida: $?"' ERR
    main "$@"
fi 