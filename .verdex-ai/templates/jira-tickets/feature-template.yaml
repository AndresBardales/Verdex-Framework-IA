# ‚ú® Verdex Framework IA - Plantilla Feature Request
# Usar esta plantilla para crear tickets de nuevas features procesadas por agentes IA

ticket_type: "Story"
priority: "Medium"

# Campos obligatorios
fields:
  summary: "[FEATURE] {{titulo_feature}}"
  
  description: |
    ## ‚ú® Descripci√≥n de la Feature
    {{descripcion_detallada}}
    
    ## üéØ Objetivo de Negocio
    {{objetivo_negocio}}
    
    ## üë• Usuario Objetivo
    **Como** {{tipo_usuario}}
    **Quiero** {{funcionalidad_deseada}}
    **Para** {{beneficio_obtenido}}
    
    ## üìã Criterios de Aceptaci√≥n
    - [ ] {{criterio_1}}
    - [ ] {{criterio_2}}
    - [ ] {{criterio_3}}
    - [ ] {{criterio_4}}
    
    ## üõ†Ô∏è Notas T√©cnicas
    {{notas_tecnicas}}
    
    ## üîó Dependencias
    {{dependencias}}
    
    ## üé® Consideraciones de UX/UI
    {{consideraciones_ux}}
    
    ## üìä Informaci√≥n del Framework
    - **Verdex Framework IA**: Solicitud procesada por agente IA
    - **Fecha de Creaci√≥n**: {{fecha}}
    - **ID del Agente**: {{agent_id}}
    - **Sesi√≥n**: {{session_id}}
    - **Estimaci√≥n Inicial**: {{estimacion}}
    
    ## üìé Recursos Adicionales
    {{recursos_adicionales}}

  labels:
    - "enhancement"
    - "ai-processed"
    - "verdex-framework"
    - "{{categoria_feature}}"
    - "{{prioridad_negocio}}"
  
  # Campos de gesti√≥n
  assignee: "{{assignee_id}}"
  reporter: "{{reporter_id}}"
  
  # Componentes del proyecto
  components:
    - "{{componente_principal}}"
  
  # Versi√≥n objetivo
  fix_version: "{{version_objetivo}}"
  
  # Story Points (estimaci√≥n)
  story_points: "{{story_points}}"
  
  # Epic link (si aplica)
  epic_link: "{{epic_id}}"

# Configuraci√≥n de workflow
workflow:
  initial_status: "Backlog"
  require_approval: true
  notify_stakeholders: true

# Plantillas de criterios por tipo de feature
criteria_templates:
  frontend:
    - "La interfaz debe ser responsive en mobile y desktop"
    - "Debe seguir las gu√≠as de dise√±o establecidas"
    - "Debe incluir validaci√≥n de formularios"
    - "Debe tener indicadores de carga"
  
  backend:
    - "La API debe responder en menos de 2 segundos"
    - "Debe incluir validaci√≥n de datos de entrada"
    - "Debe tener logging adecuado"
    - "Debe incluir tests unitarios"
  
  database:
    - "Los cambios deben ser retrocompatibles"
    - "Debe incluir scripts de migraci√≥n"
    - "Debe mantener integridad referencial"
    - "Debe incluir √≠ndices para optimizaci√≥n"

# Variables de ejemplo
example_variables:
  titulo_feature: "Sistema de notificaciones en tiempo real"
  descripcion_detallada: "Implementar un sistema que permita a los usuarios recibir notificaciones en tiempo real sobre eventos importantes"
  objetivo_negocio: "Mejorar la experiencia del usuario y aumentar el engagement"
  tipo_usuario: "usuario registrado"
  funcionalidad_deseada: "recibir notificaciones en tiempo real"
  beneficio_obtenido: "estar siempre informado de eventos importantes"
  criterio_1: "Las notificaciones deben aparecer sin recargar la p√°gina"
  criterio_2: "Debe haber diferentes tipos de notificaciones (info, warning, error)"
  criterio_3: "El usuario debe poder marcar notificaciones como le√≠das"
  criterio_4: "Debe funcionar en todos los navegadores modernos"
  notas_tecnicas: "Usar WebSockets para comunicaci√≥n en tiempo real"
  dependencias: "Configuraci√≥n del servidor WebSocket"
  consideraciones_ux: "Las notificaciones no deben ser intrusivas"
  fecha: "2025-01-07"
  agent_id: "claude-sonnet"
  session_id: "session_001"
  estimacion: "5-8 horas"
  recursos_adicionales: "Documentaci√≥n de WebSockets API"
  categoria_feature: "real-time"
  prioridad_negocio: "high-impact"
  assignee_id: ""
  reporter_id: "ai-agent"
  componente_principal: "Notifications"
  version_objetivo: "1.3.0"
  story_points: "5"
  epic_id: "" 