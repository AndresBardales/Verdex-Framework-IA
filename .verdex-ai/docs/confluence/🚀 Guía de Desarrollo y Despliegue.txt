🚀 GUÍA DE DESARROLLO Y DESPLIEGUE
📋 SETUP DEL ENTORNO DE DESARROLLO
✅ Prerrequisitos


# Herramientas requeridas
- Docker & Docker Compose v2.0+
- Flutter SDK 3.6.0+
- Git
- VS Code (recomendado)
🔧 Instalación Rápida


# 1. Clonar repositorio
git clone <repository-url>
cd asistente-voz-realtime
# 2. Levantar servicios backend
docker-compose up -d
# 3. Verificar servicios
docker-compose ps
# 4. Configurar Flutter app
cd audio_recorder_app
flutter pub get
flutter run
🏗️ ESTRUCTURA DEL PROYECTO
Organización de Directorios


asistente-voz-realtime/
├── 📱 audio_recorder_app/          # Flutter App
│   ├── lib/
│   │   ├── main.dart               # Entry point
│   │   ├── models/                 # Data models
│   │   ├── providers/              # State management
│   │   ├── screens/                # UI screens
│   │   ├── services/               # Business logic
│   │   └── widgets/                # Reusable components
│   ├── assets/config/              # Configuration files
│   └── pubspec.yaml                # Dependencies
├── ⚙️ backend/                     # FastAPI Backend
│   ├── fastapi_app/
│   │   └── main.py                 # API endpoints
│   ├── requirements.txt            # Python dependencies
│   └── Dockerfile                  # Container config
├── 🐳 docker-compose.yml           # Services orchestration
├── 📚 README.md                    # Project documentation
└── 🌳 git-branch-strategy.md       # Git workflow
🔧 CONFIGURACIÓN DETALLADA
1. Configuración de Red Local


// audio_recorder_app/assets/config/config.json
{
  "env": "dev",
  "backend_url": "http://192.168.1.10:5005",     // ⚠️ Cambiar IP
  "n8n_webhook": "http://192.168.1.10:5678/webhook/audio",
  "mqtt_host": "192.168.1.10",                   // ⚠️ Cambiar IP
  "mqtt_port": 1883,
  "mqtt_topic": "audios/demo",
  "user_id": "single-user",
  "max_recording_duration_sec": 300,
  "auto_upload": true,
  "delete_after_upload": true
}
🔍 Cómo encontrar tu IP:



# Linux/Mac
ip addr show | grep inet
# Windows
ipconfig
# Usar en config.json la IP de tu máquina de desarrollo
2. Variables de Entorno Backend


# docker-compose.yml - Configuración automática
environment:
  - MONGODB_URL=mongodb://mongo:27017/
  - MONGODB_DB=audio_productivity
  - UPLOAD_DIR=/app/audios
  - WHISPER_MODEL=base                    # tiny, base, small, medium, large
  - N8N_WEBHOOK_URL=http://n8n:5678/webhook/audio
3. Configuración Flutter


# pubspec.yaml - Dependencias principales
dependencies:
  flutter_sound: ^9.2.13          # Audio recording
  dio: ^5.4.0                     # HTTP client
  mqtt_client: ^10.0.0            # MQTT communication
  provider: ^6.1.1                # State management
  permission_handler: ^11.3.1     # Device permissions
🚀 COMANDOS DE DESARROLLO
Backend (Docker)


# Levantar todos los servicios
docker-compose up -d
# Ver logs en tiempo real
docker-compose logs -f fastapi-backend
# Reiniciar un servicio específico
docker-compose restart fastapi-backend
# Parar todos los servicios
docker-compose down
# Limpiar volúmenes (⚠️ borra datos)
docker-compose down -v
Flutter App


# Instalar dependencias
flutter pub get
# Ejecutar en debug
flutter run
# Ejecutar en dispositivo específico
flutter devices
flutter run -d <device-id>
# Build para release
flutter build apk
flutter build ios
Desarrollo con Hot Reload


# Terminal 1: Backend services
docker-compose up
# Terminal 2: Flutter app
cd audio_recorder_app
flutter run
# Los cambios en Flutter se reflejan automáticamente
# Para cambios en backend, reiniciar container
🔍 DEBUGGING Y TROUBLESHOOTING
Problemas Comunes
1. App no conecta al backend


# Verificar que el backend esté corriendo
curl http://192.168.1.10:5005/health
# Verificar IP en config.json
cat audio_recorder_app/assets/config/config.json
# Verificar firewall (Linux)
sudo ufw status
sudo ufw allow 5005
2. Error de permisos de audio


// En Android, verificar permisos en AndroidManifest.xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
// En iOS, verificar Info.plist
<key>NSMicrophoneUsageDescription</key>
<string>Esta app necesita acceso al micrófono para grabar audio</string>
3. MQTT no conecta


# Verificar EMQX dashboard
http://192.168.1.10:18083
# Usuario: admin, Password: public
# Test MQTT connection
docker exec -it audio-emqx emqx_ctl status
4. Whisper model no carga


# Verificar logs del backend
docker-compose logs fastapi-backend
# El modelo se descarga automáticamente en el primer uso
# Puede tardar varios minutos la primera vez
Logs Útiles


# Backend API logs
docker-compose logs -f fastapi-backend
# MongoDB logs
docker-compose logs -f mongo
# n8n logs
docker-compose logs -f n8n
# EMQX logs
docker-compose logs -f emqx
# Flutter logs (en consola durante flutter run)
flutter logs
🧪 TESTING
Testing Backend


# Health check
curl http://192.168.1.10:5005/health
# Upload test (con archivo de audio)
curl -X POST http://192.168.1.10:5005/upload-audio \
  -F "audio=@test_audio.aac" \
  -F "user_id=test-user"
# Ver grabaciones
curl http://192.168.1.10:5005/recordings/test-user
Testing Flutter


# Unit tests
flutter test
# Integration tests
flutter test integration_test/
# Widget tests
flutter test test/widget_test.dart
Testing MQTT


# Suscribirse a topic (usando mosquitto-clients)
mosquitto_sub -h 192.168.1.10 -t "audios/demo"
# Publicar mensaje de prueba
mosquitto_pub -h 192.168.1.10 -t "audios/demo" -m "test message"
📦 DESPLIEGUE EN PRODUCCIÓN
1. Configuración de Producción


// config.json para producción
{
  "env": "prod",
  "backend_url": "https://api.tu-dominio.com",
  "n8n_webhook": "https://n8n.tu-dominio.com/webhook/audio",
  "mqtt_host": "mqtt.tu-dominio.com",
  "mqtt_port": 8883,                    // SSL
  "show_debug_info": false
}
2. Docker Compose Producción


# docker-compose.prod.yml
version: '3.8'
services:
  fastapi-backend:
    build: ./backend
    environment:
      - ENV=production
      - MONGODB_URL=mongodb://mongo:27017/
      - WHISPER_MODEL=small              # Mejor precisión
    restart: always
  nginx:                                # Reverse proxy
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl
3. Build Flutter para Producción


# Android APK
flutter build apk --release
# Android App Bundle (para Google Play)
flutter build appbundle --release
# iOS (requiere Mac + Xcode)
flutter build ios --release
4. Configuración SSL/HTTPS


# nginx.conf
server {
    listen 443 ssl;
    server_name api.tu-dominio.com;
    ssl_certificate /etc/ssl/cert.pem;
    ssl_certificate_key /etc/ssl/key.pem;
    location / {
        proxy_pass http://fastapi-backend:5005;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
🔄 CI/CD Pipeline
GitHub Actions (Ejemplo)


# .github/workflows/deploy.yml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.6.0'
      - name: Build Flutter
        run: |
          cd audio_recorder_app
          flutter pub get
          flutter test
          flutter build apk --release
      - name: Deploy Backend
        run: |
          docker-compose -f docker-compose.prod.yml up -d
📊 MONITOREO EN PRODUCCIÓN
Health Checks


# Script de monitoreo
#!/bin/bash
# health_check.sh
BACKEND_URL="https://api.tu-dominio.com"
# Check backend
if curl -f $BACKEND_URL/health > /dev/null 2>&1; then
    echo "✅ Backend OK"
else
    echo "❌ Backend DOWN"
    # Enviar alerta
fi
# Check services
docker-compose ps --format "table {{.Name}}\t{{.Status}}"
Logs Centralizados


# docker-compose.yml con logging
services:
  fastapi-backend:
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
🔗 RECURSOS Y ENLACES
Documentación Técnica
API Docs: http://localhost:5005/docs

Swagger UI: http://localhost:5005/redoc

EMQX Dashboard: http://localhost:18083

n8n Interface: http://localhost:5678

Herramientas de Desarrollo
Flutter DevTools: flutter pub global activate devtools

MongoDB Compass: GUI para MongoDB

MQTT Explorer: Cliente MQTT visual

Postman: Testing de APIs

Comandos Útiles


# Ver puertos ocupados
netstat -tulpn | grep :5005
# Limpiar Docker
docker system prune -a
# Ver uso de recursos
docker stats
# Backup MongoDB
docker exec audio-mongo mongodump --out /backup
Última actualización: Julio 5, 2025  
Guía completa para desarrollo y despliegue v1.0